name: Cross-Network Connectivity
config:
  selector: run=go-ipfs-stress
  nodes: 3
  times: 3
  expected:
      successes: 3
      failures: 0
      timeouts: 0
steps:
  - name: Remove all bootstrap peers from node 1
    on_node: 1
    cmd: for node in $(ipfs bootstrap list); do ipfs bootstrap rm $node; done;
    timeout: 0
  - name: Remove all bootstrap peers from node 3
    on_node: 3
    cmd: for node in $(ipfs bootstrap list); do ipfs bootstrap rm $node; done;
    timeout: 0
  - name: Remove all normal peers from node 1
    on_node: 1
    cmd: for node in $(ipfs swarm peers); do ipfs swarm disconnect $node; done;
    timeout: 0
  - name: Remove all normal peers from node 3
    on_node: 3
    cmd: for node in $(ipfs swarm peers); do ipfs swarm disconnect $node; done;
    timeout: 0
  - name: Create 5MB File 
    on_node: 1
    cmd: head -c 5000000 /dev/urandom | base64 > /tmp/file.txt && md5sum /tmp/file.txt | cut -d ' ' -f 1 && ipfs add -q /tmp/file.txt
    timeout: 0
    outputs: 
    - line: 0
      save_to: FILE
    - line: 1
      save_to: HASH
  - name: Get connection info from node 2
    on_node: 2
    # TODO(ajm): this can be flaky, recommend command run with exponential backoff and max timeout
    # possible reason: when tests scale up nodes, they do not await pod readiness and
    #   start running tests before the node has discovered local peers
    # TODO(ajm): dynamically insert pod-cidr range
    cmd: ipfs id -f "<addrs>" | grep -E '/ip4/(172\.31|10)\.'
    outputs:
    - line: 0
      save_to: LANADDR
  - name: Connect to node 2 from node 1
    on_node: 1
    inputs:
      - LANADDR
    cmd: ipfs swarm connect $LANADDR
  - name: Connect to node 2 from node 3
    on_node: 3
    inputs:
      - LANADDR
    cmd: ipfs swarm connect $LANADDR
  - name: Cat file on node 3
    on_node: 3
    inputs:
      - HASH
    cmd: ipfs cat $HASH | md5sum | cut -d ' ' -f 1
    timeout: 30
    assertions:
    - line: 0
      should_be_equal_to: FILE
   # DEBUG
  - name: Echo hash
    on_node: 3
    inputs:
      - HASH
    cmd: echo $HASH
    timeout: 30
